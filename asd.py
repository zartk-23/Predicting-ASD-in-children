# -*- coding: utf-8 -*-
"""asd.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EXKqEHoDam0JP-bUKog3J7sb0kcgXvBB
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, roc_auc_score

df = pd.read_csv("Toddler Autism dataset July 2018.csv")

df.drop(columns=['Case_No'], inplace=True, errors='ignore')

df = df.apply(pd.to_numeric, errors='coerce')

print(df.isnull().sum())  # Check for NaN values in each column
df.fillna(0, inplace=True)  # Optionally fill NaNs with a default value

# Check all column names
print("Columns in DataFrame:", df.columns.tolist())

# Strip whitespace from column names
df.columns = df.columns.str.strip()

# Recheck columns after stripping
print("Columns after stripping whitespace:", df.columns.tolist())

# Check if 'Class/ASD Traits' exists
if 'Class/ASD Traits' in df.columns:
    # Proceed with your operations
    X = df.drop(columns='Class/ASD Traits')  # Features
    y = df['Class/ASD Traits']  # Target variable
else:
    print("Column 'Class/ASD Traits' does not exist.")

print(df.dtypes)  # Check data types of all columns
print(df.head())  # View first few rows of the DataFrame

# Handling categorical variables
label_encoders = {}
categorical_cols = ['Sex', 'Ethnicity', 'Jaundice', 'Family_mem_with_ASD','Who completed the test']
for col in categorical_cols:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

# Encoding Yes/No answers (A1-A10)
for col in ['A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10']:
    df[col] = df[col].map({'Yes': 1, 'No': 0})

# Define features and target variable
X = df.drop(columns='Class/ASD')  # Features
y = df['Class/ASD']  # Target variable

# Standardizing numerical features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train a Random Forest model
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Make predictions
y_pred = rf_model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print(f'ROC-AUC Score: {roc_auc:.2f}')
print(classification_report(y_test, y_pred))

# Hyperparameter tuning
param_grid = {
    'n_estimators': [50, 100, 150],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

grid_search = GridSearchCV(RandomForestClassifier(random_state=42), param_grid, cv=5, n_jobs=-1, verbose=2)
grid_search.fit(X_train, y_train)

# Best parameters and score
print("Best Parameters:", grid_search.best_params_)
print("Best Score:", grid_search.best_score_)

import streamlit as st

# Data Visualization
st.title("ASD Prediction - Data Analysis")
st.subheader("Feature Correlation Heatmap")
fig, ax = plt.subplots(figsize=(10,6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', ax=ax)
st.pyplot(fig)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_pred)
st.subheader("Model Evaluation")
st.write(f'Accuracy: {accuracy:.2f}')
st.write(f'ROC-AUC Score: {roc_auc:.2f}')
st.text(classification_report(y_test, y_pred))

# Hyperparameter tuning
param_grid = {
    'n_estimators': [50, 100, 150],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

grid_search = GridSearchCV(RandomForestClassifier(random_state=42), param_grid, cv=5, n_jobs=-1, verbose=2)
grid_search.fit(X_train, y_train)

# Best parameters and score
st.subheader("Hyperparameter Tuning Results")
st.write("Best Parameters:", grid_search.best_params_)
st.write("Best Score:", grid_search.best_score_)

# Streamlit user input form
st.title("ASD Prediction Application")
user_input = {}
for col in X.columns:
    user_input[col] = st.number_input(f"Enter value for {col}", value=float(X[col].mean()))

if st.button("Predict ASD Probability"):
    user_data = np.array([list(user_input.values())]).reshape(1, -1)
    user_data_scaled = scaler.transform(user_data)
    prediction = rf_model.predict(user_data_scaled)
    st.write("Predicted ASD Classification:", "Yes" if prediction[0] == 1 else "No")